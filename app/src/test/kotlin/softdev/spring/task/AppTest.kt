/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package softdev.spring.task

import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class AppTest {

    @Test
    fun moveTest() {
        val s = Snake(3, 1)
        val cellssnake: MutableList<CellS> = mutableListOf()
        for (i in 0 until s.length) {
            cellssnake += CellS(96 - i * sizeOfOne, 48, Vector.RIGHT)
        }
        s.move(cellssnake)
        s.move(cellssnake)
        s.right = false
        s.down = true
        s.move(cellssnake)
        s.move(cellssnake)
        assertEquals(cellssnake[0].getX(), 128)
        assertEquals(cellssnake[0].getY(), 80)
    }

    @Test
    fun sizeTest() {
        val s = Snake(3, 1)
        val cellssnake: MutableList<CellS> = mutableListOf()
        for (i in 0 until s.length) {
            cellssnake += CellS(96 - i * sizeOfOne, 48, Vector.RIGHT)
        }
        s.changeSize(3, cellssnake)
        assertEquals(s.length, 6)
        s.move(cellssnake)
        assertEquals(cellssnake[0].getX(), 112)
    }

    @Test
    fun deathTest() {
        val s = Snake(3, 1)
        val s2 = Snake(3, 2)
        val cellssnake: MutableList<CellS> = mutableListOf()
        val cellssnake2: MutableList<CellS> = mutableListOf()
        for (i in 0 until s.length) {
            cellssnake += CellS(96 - i * sizeOfOne, 48, Vector.RIGHT)
        }
        for (i in 0 until s2.length) {
            cellssnake2 += CellS(96 - i * sizeOfOne, 64, Vector.RIGHT)
        }
        s2.up = true
        s2.right = false
        s2.move(cellssnake2)
        val a = s.checkEachBump(s, s2, cellssnake, cellssnake2)
        assertEquals(a, false)
        val s3 = Snake(3, 1)
        val cellssnake3: MutableList<CellS> = mutableListOf()
        for (i in 0 until s3.length) {
            cellssnake3 += CellS(96 - i * sizeOfOne, 16, Vector.RIGHT)
        }
        s3.right = false
        s3.up = true
        s3.move(cellssnake3)
        s3.move(cellssnake3)
        assertEquals(s3.checkBump(cellssnake3), false)
    }

    @Test
    fun eatTest() {
        val s = Snake(3, 1)
        val cellssnake: MutableList<CellS> = mutableListOf()
        for (i in 0 until s.length) {
            cellssnake += CellS(96 - i * sizeOfOne, 48, Vector.RIGHT)
        }
        s.move(cellssnake)
        val food = Food(112, 48)
        val a = s.checkEaten(food, cellssnake)
        assertEquals(a, true)
    }
}
